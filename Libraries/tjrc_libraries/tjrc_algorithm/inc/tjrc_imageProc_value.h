/*
 * nosaydie_camera_bianliang.h
 *
 *  Created on: 2021年11月11日
 *      Author: Administrator
 */

#ifndef _TJRC_IMAGEPROC_VALUE_H_
#define _TJRC_IMAGEPROC_VALUE_H_
#include "common.h"
#include "tjrc_imageProc.h"
#define LCDW 120
 //相关变量
//gui相关  #全局 gui 使用
uint8 value3[30];
//  发车/停车标志  #全局 未使用
uint8 run_flag = 0;
uint8 stop_flag = 0;
//  图像处理：一般处理
//      使能相关变量  #全局 使用
uint8 enable_balinyu = 1;                                   //八邻域爬线使能标志，默认使能
uint8 enable_midline = 1;                                   //使能中线拟合，默认不开启
uint8 enable_midpross = 1;                                  //使能中线处理，默认开启
uint8 enable_check_l_r_edge_same = 0;                       //使能左、右边线是否重合，默认不开启
//      搜线限制相关  #全局 控制 使用
uint8 L_edge_end_row = 5;                                   //左边界行结束点
uint8 R_edge_end_row = 5;                                   //右
uint8 M_edge_end_row = 5;                                   //中
uint8 min_col = 3, max_col = LCDW - 3;        //搜索结束列值
uint8 L_edge_start_col = 3;         //左边界列搜索起始点
uint8 R_edge_start_col = 117;       //右边界列搜索起始点

// #全局 flag 使用
uint8 L_start_lost = 0;//左边线起始丢线标志
uint8 R_start_lost = 0;//右边线起始丢线标志
//      搜线计数相关  #全局 控制 使用
uint8 Image_H = MT9V03X_H;
uint8 Image_W = MT9V03X_W;
uint8 left_findflag, right_findflag;
uint8 L_basic_row_start = MT9V03X_H - 1;                      //左边线搜线开始点
uint8 R_basic_row_start = MT9V03X_H - 2;                      //右边线搜线开始点
uint8 L_search_edge_count = 0, R_search_edge_count = 0;     //搜索到边界
uint8 line_point_count_left, line_point_count_right;        //左右线有效点计数
uint8 L_edge_count = 0, R_edge_count = 0;                     //左右边点的个数
uint8 Mid_count = 0;                                          //中线点的个数
uint8 center_arry_count;
uint8 line_lose_center_left;
uint8 line_lose_center_right;
uint8 dire_left;                                            //记录上一个点的相对位置
uint8 dire_right;                                           //记录上一个点的相对位置
uint8 center_turn_flag;                                     //0 左趋势， 1 右趋势
uint8 center_biaoxiang_arry[5];

// #全局 flag 使用
uint8 center_lost_flag_l = 0;//中间左丢线标志位;
uint8 center_lost_row_l = 0;//中间左丢线开始行坐标
uint8 center_lost_col_l = 0;//中间左丢线开始列坐标
uint8 center_lost_flag_r = 0;//中间右丢线标志位
uint8 center_lost_row_r = 0;//中间右丢线开始行坐标
uint8 center_lost_col_r = 0;//中间右丢线开始列坐标
uint8 L_edge_lost_start_col = 4;//中间左丢线列搜索起始点
uint8 R_edge_lost_start_col = 115;//中间右丢线列搜索起始点

// #全局 控制 使用
uint8 L_lost_count = 0;//左丢线计数
uint8 L_lost_ = 10;//左丢线限制次数
uint8 R_lost_count = 0;//右丢线计数
uint8 R_lost_ = 10;//右丢线限制次数
//      边界预处理 #全局 使用
uint8 edge_process_flag = 0;
uint8 pre_L_edge_count = 0;
uint8 pre_R_edge_count = 0;
uint8 num_cnt = 0;//记录连续水平点的个数
uint8 L_count = 0;
uint8 R_count = 0;
float line_blur_kernel = 7;  //边线三角滤波核的大小
//          拐点处理  #全局 使用
uint8 enable_L_corner = 1;//左拐点搜索使能标志 默认使能
uint8 enable_R_corner = 1;//右拐点搜索是能标志 默认使能
uint8 L_corner_flag = 0;//左拐点存在标志
uint8 L_corner_row = 0;//左拐点所在行
uint8 L_corner_col = 0;//左拐点所在列
int L_corner_angle = 0;//左拐点角度
uint8 R_corner_flag = 0;//右拐点存在标志
uint8 R_corner_row = 0;//右拐点所在行
uint8 R_corner_col = 0;//右拐点所在列
int R_corner_angle = 0;//右拐点角度

// #全局 使用
uint8 L_top_corner_start = 0;//左上拐点开始序号
uint8 R_top_corner_start = 0;//右上拐点开始序号

// #全局 使用
uint8 L_top_i = 0;//左上拐角对应i
uint8 L_beh_i = 0;//左下拐角对应i
uint8 R_top_i = 0;//右上拐角对应i
uint8 R_beh_i = 0;//右下拐角对应i

// #全局 控制 使用
uint8 dist = 4;//求拐点角度的点数间隔

//      中线相关  #全局 使用
uint8 center_lost_corner_row_l = 0;//中间左丢线开始拐点行坐标
uint8 center_lost_corner_col_l = 0;//中间左丢线开始拐点列坐标
int L_center_lost_corner_angle = 0;//中间左丢线开始左拐点角度
uint8 center_lost_corner_row_r = 0;//中间右丢线开始拐点行坐标
uint8 center_lost_corner_col_r = 0;//中间右丢线开始拐点列坐标
int R_center_lost_corner_angle = 0;//中间右丢线开始左拐点角度

// 拟合斜率  #全局 使用
float k_l = 0;
float b_l = 0;

float k_r = 0;
float b_r = 0;

//方差  #全局 使用
float statistics1 = 0;

//质量矩，赛道宽度(后期修改)
uint8 Road_Width[LCDH] = { 113,112,111,110,109,108,107,106,105,104,103,102,101,100,99 ,98 ,97 ,96 ,95 ,94 ,
						93 ,92 ,91 ,90 , 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74,
						73 ,72 ,71 ,70 ,69 , 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54,
						53 ,52 , 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34 };
//  元素识别
//      环岛
uint8 HuanDao_FLAG = 0; //进入环岛，默认为0
//      车库
uint8 In_CheKu_flag = 0;//入库标志，默认为0


//  数学参数  #全局 使用
/* 前进方向定义：
 *   0
 * 3   1
 *   2
 */int dir_front[4][2] = { {-1,  0},
								{0,  1},
								{1,  0},
								{0, -1} };
/* 前进方向定义：
 * 0   1
 *
 * 3   2
*/int dir_frontleft[4][2] = { {-1, -1},
								{-1,  1},
								{1,  1},
								{1, -1} };
/* 前进方向定义：
 * 3   0
 *
 * 2   1
*/int dir_frontright[4][2] = { {-1,  1},
								 {1,  1},
								{1, -1},
								 {-1, -1} };

/*        三角函数     */
float   sin_value[91] = {               //正弦值表格
						0.0000,
						0.0174,
						0.0349,
						0.0523,
						0.0697,
						0.0871,
						0.1045,
						0.1218,
						0.1391,
						0.1564,
						0.1736,
						0.1907,
						0.2078,
						0.2248,
						0.2418,
						0.2587,
						0.2755,
						0.2922,
						0.3089,
						0.3254,
						0.3419,
						0.3582,
						0.3744,
						0.3905,
						0.4065,
						0.4224,
						0.4382,
						0.4538,
						0.4693,
						0.4846,
						0.4998,
						0.5148,
						0.5297,
						0.5444,
						0.5589,
						0.5733,
						0.5875,
						0.6016,
						0.6154,
						0.6291,
						0.6425,
						0.6558,
						0.6689,
						0.6817,
						0.6944,
						0.7068,
						0.7191,
						0.7311,
						0.7429,
						0.7544,
						0.7658,
						0.7769,
						0.7877,
						0.7984,
						0.8087,
						0.8189,
						0.8288,
						0.8384,
						0.8478,
						0.8569,
						0.8658,
						0.8744,
						0.8827,
						0.8908,
						0.8985,
						0.9061,
						0.9133,
						0.9203,
						0.9270,
						0.9334,
						0.9395,
						0.9453,
						0.9509,
						0.9561,
						0.9611,
						0.9658,
						0.9701,
						0.9742,
						0.9780,
						0.9815,
						0.9847,
						0.9876,
						0.9902,
						0.9925,
						0.9944,
						0.9961,
						0.9975,
						0.9986,
						0.9994,
						0.9998,
						1.0000
};
float   cos_value[91] = {               //余弦值表格
						1.0000,
						0.9998,
						0.9994,
						0.9986,
						0.9976,
						0.9962,
						0.9945,
						0.9926,
						0.9903,
						0.9877,
						0.9848,
						0.9816,
						0.9782,
						0.9744,
						0.9703,
						0.9660,
						0.9613,
						0.9563,
						0.9511,
						0.9456,
						0.9398,
						0.9336,
						0.9273,
						0.9206,
						0.9136,
						0.9064,
						0.8989,
						0.8911,
						0.8831,
						0.8747,
						0.8662,
						0.8573,
						0.8482,
						0.8388,
						0.8292,
						0.8193,
						0.8092,
						0.7988,
						0.7882,
						0.7774,
						0.7663,
						0.7549,
						0.7434,
						0.7316,
						0.7196,
						0.7074,
						0.6950,
						0.6823,
						0.6694,
						0.6564,
						0.6431,
						0.6297,
						0.6160,
						0.6022,
						0.5882,
						0.5740,
						0.5596,
						0.5451,
						0.5304,
						0.5155,
						0.5005,
						0.4853,
						0.4700,
						0.4545,
						0.4389,
						0.4231,
						0.4073,
						0.3913,
						0.3752,
						0.3589,
						0.3426,
						0.3262,
						0.3096,
						0.2930,
						0.2763,
						0.2595,
						0.2426,
						0.2256,
						0.2086,
						0.1915,
						0.1743,
						0.1571,
						0.1399,
						0.1226,
						0.1053,
						0.0879,
						0.0705,
						0.0531,
						0.0357,
						0.0182,
						0.0000
};
float   tan_value[91] = {               //正弦值表格
						0.0000,
						0.0174,
						0.0349,
						0.0524,
						0.0699,
						0.0874,
						0.1051,
						0.1227,
						0.1405,
						0.1583,
						0.1762,
						0.1943,
						0.2124,
						0.2307,
						0.2492,
						0.2678,
						0.2866,
						0.3056,
						0.3247,
						0.3441,
						0.3638,
						0.3837,
						0.4038,
						0.4242,
						0.4450,
						0.4660,
						0.4874,
						0.5092,
						0.5314,
						0.5540,
						0.5770,
						0.6005,
						0.6245,
						0.6490,
						0.6741,
						0.6997,
						0.7261,
						0.7530,
						0.7807,
						0.8092,
						0.8385,
						0.8687,
						0.8997,
						0.9318,
						0.9649,
						0.9992,
						1.0347,
						1.0715,
						1.1097,
						1.1494,
						1.1907,
						1.2338,
						1.2787,
						1.3258,
						1.3750,
						1.4267,
						1.4810,
						1.5382,
						1.5985,
						1.6623,
						1.7299,
						1.8018,
						1.8782,
						1.9599,
						2.0474,
						2.1413,
						2.2425,
						2.3520,
						2.4708,
						2.6003,
						2.7422,
						2.8983,
						3.0710,
						3.2633,
						3.4788,
						3.7222,
						3.9993,
						4.3181,
						4.6887,
						5.1254,
						5.6479,
						6.2846,
						7.0781,
						8.0952,
						9.4468,
						11.3319,
						14.1460,
						18.8042,
						28.0109,
						54.8162,
						1255.7656,
};
#endif /* CODE_NOSAYDIE_CAMERA_BIANLIANG_H_ */